{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","login","setState","showLoginForm","onSubmit","event","state","username","trim","length","authenticated","preventDefault","onInputChange","value","target","name","makeFlowerGrid","flowers","grid","row","i","img","push","src","process","alt","className","this","type","onChange","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAiGeA,G,wDA7FX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAkBVC,MAAQ,WACJ,EAAKC,SAAS,CAACC,eAAc,KApBd,EAuBnBC,SAAW,SAACC,GACL,EAAKC,MAAMC,SAASC,OAAOC,OAAS,GACnC,EAAKP,SAAS,CAACQ,eAAe,IAElCL,EAAMM,kBA3BS,EA8BnBC,cAAgB,SAACP,GACb,IAAMQ,EAAQR,EAAMS,OAAOD,MACrBE,EAAOV,EAAMS,OAAOC,KAC1B,EAAKb,SAAL,eAAgBa,EAAOF,KAjCR,EAoCnBG,eAAiB,WAIb,IAHA,IAAIC,EAAU,EAAKX,MAAMW,QACrBC,EAAO,GACPC,EAAM,GACDC,EAAI,EAAGA,EAAIH,EAAQR,OAAQW,IAAI,CAAC,IAAD,EACnBH,EAAQG,GAArBL,EADgC,EAChCA,KAAMM,EAD0B,EAC1BA,IACO,GAAdF,EAAIV,SACHS,EAAKI,KAAK,4BAAKH,IACfA,EAAM,IAEVA,EAAIG,KACA,4BACA,yBAAKC,IAAKC,aAAyBH,EAAKI,IAAI,WAC5C,uBAAGC,UAAU,cAAcX,KAMnC,OADAG,EAAKI,KAAK,4BAAKH,IACRD,GArDP,EAAKZ,MAAQ,CACTC,SAAU,GACVJ,eAAe,EACfO,eAAe,EACfO,QAAS,CACL,CAACF,KAAM,WAAYM,IAAK,wBACxB,CAACN,KAAM,iBAAkBM,IAAK,6BAC9B,CAACN,KAAM,OAAQM,IAAK,oBACpB,CAACN,KAAM,QAASM,IAAK,qBACrB,CAACN,KAAM,YAAaM,IAAK,yBACzB,CAACN,KAAM,QAASM,IAAK,qBACrB,CAACN,KAAM,OAAQM,IAAK,oBACpB,CAACN,KAAM,aAAcM,IAAK,2BAdnB,E,qDA2Df,OAAKM,KAAKrB,MAAMI,eAAkBiB,KAAKrB,MAAMH,cAErC,6BACI,0BAAMC,SAAUuB,KAAKvB,UACjB,6CACA,2BACAwB,KAAK,OACLb,KAAK,WACLF,MAAOc,KAAKrB,MAAMC,SAClBsB,SAAUF,KAAKf,gBAEf,4BAAQgB,KAAK,UAAb,WAOZ,6BACI,yBAAKF,UAAU,eACVC,KAAKrB,MAAMI,cAAgBiB,KAAKrB,MAAMC,SACrC,4BAAQuB,QAASH,KAAK1B,OAAtB,UAEN,6BAAK,wDACL,2BAAOyB,UAAU,eACb,+BACCC,KAAKX,wB,GAtFPe,IAAMC,Y,MCUVC,MATf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78a988ab.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            showLoginForm: false,\n            authenticated: false,\n            flowers: [\n                {name: 'Daffodil', img: '/images/daffodil.png'},\n                {name: 'Cherry Blossom', img: '/images/cherryblossom.png'},\n                {name: 'Lily', img: '/images/lily.jpg'},\n                {name: 'Daisy', img: '/images/daisy.jpg'},\n                {name: 'Sunflower', img: '/images/sunflower.png'},\n                {name: 'Tulip', img: '/images/tulip.png'},\n                {name: 'Rose', img: '/images/rose.png'},\n                {name: 'Water Lily', img: '/images/waterlily.png'}\n            ]\n        };\n    }\n\n    login = () => {\n        this.setState({showLoginForm:true});\n    }\n\n    onSubmit = (event) => {\n        if(this.state.username.trim().length > 0){\n            this.setState({authenticated: true});\n        }\n        event.preventDefault();\n    }\n\n    onInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({[name]: value});\n    }\n\n    makeFlowerGrid = () => {\n        let flowers = this.state.flowers;\n        let grid = []\n        let row = []\n        for (let i = 0; i < flowers.length; i++){\n            let{name, img} = flowers[i]\n            if(row.length == 4){\n                grid.push(<tr>{row}</tr>)\n                row = []\n            }\n            row.push(\n                <td>\n                <img src={process.env.PUBLIC_URL + img} alt=\"flower\"></img>\n                <p className=\"flowerName\">{name}</p>\n                </td>\n            )\n            \n        }\n        grid.push(<tr>{row}</tr>)\n        return grid\n    }\n\n    render() {\n        if((!this.state.authenticated) && this.state.showLoginForm){\n            return(\n                <div>\n                    <form onSubmit={this.onSubmit}>\n                        <label>Username: </label>\n                        <input \n                        type=\"text\" \n                        name=\"username\"\n                        value={this.state.username}\n                        onChange={this.onInputChange}\n                        ></input>\n                        <button type=\"submit\">Login</button>\n                    </form>  \n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className=\"loginButton\">\n                    {this.state.authenticated ? this.state.username\n                    : <button onClick={this.login}>Login</button>}   \n                </div>\n                <div><h3>Hello, From My Homepage</h3></div>\n                <table className=\"flowerTable\">\n                    <tbody>\n                    {this.makeFlowerGrid()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from './components/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}