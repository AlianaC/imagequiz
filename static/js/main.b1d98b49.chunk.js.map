{"version":3,"sources":["ServerInterface/server.js","components/Home.js","components/Login.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["API","server","getQuizzes","fetch","then","x","json","getQuiz","i","saveScore","username","quizid","score","data","method","headers","body","JSON","stringify","Home","props","makeFlowerGrid","flowers","state","grid","row","length","name","img","push","quiz","pathname","flowerName","to","src","process","alt","className","location","user","map","q","key","id","picture","setState","catch","e","console","log","this","type","React","Component","Login","onSubmit","event","trim","authenticated","preventDefault","onInputChange","value","target","from","onChange","Quiz","answerClicked","correct","curr","numQ","currQ","showScore","tryAgain","showQuestion","questions","image","class","question","answers","answer","onClick","answerText","App","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b1d98b49.chunk.js","sourcesContent":["let API = \"https://alianac-imagequiz.herokuapp.com\";\n\nlet getQuizzes = () => {\n    return(fetch (API + \"/quizzes\").then(x => x.json()));\n}\n\nlet getQuiz = (i) => {\n    return(fetch (API + `/quiz/${i}`).then(x => x.json()));\n}\n\nlet saveScore = (username, quizid, score) => {\n    let data = {username: username, quizid: quizid, score: score};\n    return(fetch (API + \"/score\",\n    {method: \"POST\", headers: {\"CONTENT-TYPE\": \"application/json\"}, body: JSON.stringify(data)}).then(x => x.json()));\n\n}\n\nlet server = {getQuizzes: getQuizzes, getQuiz: getQuiz, saveScore: saveScore};\nexport default server;\n","import React from 'react';\nimport './Home.css';\nimport { Link } from 'react-router-dom';\nimport server from '../ServerInterface/server.js';\n\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            data: [],\n        };\n    }\n\n    makeFlowerGrid = () => {\n        let flowers = this.state.flowers;\n        let grid = []\n        let row = []\n        for (let i = 0; i < flowers.length; i++){\n            let{name, img} = flowers[i]\n            if(row.length === 4){\n                grid.push(<tr>{row}</tr>)\n                row = []\n            }\n            let quiz = {pathname: \"/quiz\", state: {flowerName: name}};\n            row.push(\n                <td>\n                <Link to={quiz}>\n                <img src={process.env.PUBLIC_URL + img} alt=\"flower\"></img>\n                </Link>\n                <p className=\"flowerName\">{name}</p>\n                </td>\n            )\n            \n        }\n        grid.push(<tr>{row}</tr>)\n        return grid\n    }\n\n    componentDidMount() {\n        //this.setState({data: server.getQuizzes()})\n        server.getQuizzes().then(data => this.setState({data: data})).catch(e => console.log(e));\n    }\n\n    body = () => {\n        let username = \"\";\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.user){\n                    username = location.state.user;\n                }\n            }\n        }\n\n        return (\n            <div>\n                {this.state.data.length > 0 ?\n                    <div>\n                        {this.state.data.map((q, i) =>\n                            <div className=\"pictureDiv\" key={i}>\n                                <Link className=\"qLink\" to={{\n                                    pathname: \"\\quiz\", state:\n                                    {id: q.id, user: username}\n                                }}>\n                                <img src={process.env.PUBLIC_URL + q.picture} alt=\"flower\"></img>\n                                </Link>\n                                <figcaption className=\"flowerName\"><b>{q.name}</b></figcaption>\n                            </div>\n                        )}\n                    </div>\n                : \"\"}\n            </div>\n        );\n    }\n\n    render() {\n        let username = \"\";\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.user){\n                    username = location.state.user;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"loginButton\">\n                    {username.length > 0 ? username\n                    : <Link to=\"/login\"><button type=\"text\">Login</button></Link>}   \n                </div>\n                <h2 className=\"homepageHeader\">Image Quiz Homepage</h2>\n                <table className=\"flowerTable\">\n                    <tbody>\n                    {this.body()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './Login.css';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            authenticated: false\n        };\n    }\n    onSubmit = (event) => {\n        if(this.state.username.trim().length > 0){\n            this.setState({authenticated: true});\n        }\n        event.preventDefault();\n    }\n\n    onInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({[name]: value});\n    }\n\n    render() {\n        let from = {pathname: \"/\", state: {user: this.state.username}};\n        if(this.state.authenticated){\n            return (\n                <Redirect to={from} />\n            );\n        }\n\n        return(\n            <div className=\"loginPage\">\n                <h2>Login Page</h2>\n                <form onSubmit={this.onSubmit}>\n                    <label>Username: </label>\n                    <input \n                    type=\"text\" \n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onInputChange}\n                    ></input>\n                    <button type=\"submit\">Login</button>\n                </form>  \n            </div>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\nimport server from '../ServerInterface/server.js';\n\n\nclass Quiz extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            currQ: 0,\n            score: 0,\n            showScore: false\n        };\n    }\n\n    answerClicked = (correct) => {\n        if(correct){\n            let curr = this.state.score + 1;\n            this.setState({score: curr});\n        }\n        let numQ = this.state.currQ + 1;\n        if(numQ < this.state.data.length){\n            this.setState({currQ: numQ});\n        }else{\n            this.setState({showScore: true});\n        }\n    }\n\n    tryAgain = () => {\n        server.saveScore(this.props.location.state.user, this.props.location.state.id, this.state.score).catch(e => console.log(e));\n        this.setState({score: 0, showScore: false, currQ: 0});\n    }\n\n    showQuestion = () => {\n        let questions = this.state.data;\n        if(questions.length !== 0){\n            return (\n                <div className=\"quizSec\">\n                    <img \n                    src={process.env.PUBLIC_URL + questions[this.state.currQ].image} \n                    class=\"flowerImg\" \n                    alt=\"flower\"></img>\n                    <div className=\"quizQuestions\">\n                        <h4 className=\"questionText\">\n                            {this.state.currQ + 1}) {questions[this.state.currQ].question}\n                        </h4>\n                    </div>\n                    <div className=\"answerSec\">\n                    {questions[this.state.currQ].answers.map((answer) => (\n                        <button \n                        className=\"ansB\" \n                        type=\"text\"\n                        onClick={() => this.answerClicked(answer.correct)}>\n                            {answer.answerText}\n                        </button>\n                    ))}\n                    </div>\n                </div>\n            );\n        }\n\n    }\n\n    componentDidMount() {\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.id){\n                    server.getQuiz(location.state.id).then(data => this.setState({data: data})).catch(e => console.log(e));\n                    console.log(this.state.data);\n                }\n            }\n        }\n    }\n\n    render(){\n\n        return(\n            <div>\n                <h2 className=\"quizHeader\">Image Quiz</h2>\n                {this.state.showScore ? (\n                    <div className=\"scoreSec\">\n                        <h4>You scored {this.state.score} out of 6</h4>\n                        <Link to=\"/\">\n                        <button \n                        type=\"text\"\n                        className=\"endB\">Home\n                        </button>\n                        </Link>\n                        <button \n                        type=\"text\" \n                        className=\"endB\"\n                        onClick={this.tryAgain}>Try Again\n                        </button>\n                    </div>\n                ) : (this.showQuestion())}   \n            </div>\n        );\n    }\n}\n\nexport default Quiz;","import React from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Quiz from './components/Quiz';\nimport './App.css';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/quiz\" render={props => <Quiz {...props} />}>\n                </Route>\n                <Route path=\"/\" render={props => <Home {...props} />}>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}