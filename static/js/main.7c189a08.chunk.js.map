{"version":3,"sources":["components/Home.js","components/Login.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","makeFlowerGrid","flowers","state","grid","row","i","length","name","img","push","quiz","pathname","flowerName","to","src","process","alt","className","username","location","this","user","type","React","Component","Login","onSubmit","event","trim","setState","authenticated","preventDefault","onInputChange","value","target","from","onChange","Quiz","answerClicked","correct","curr","score","numQ","currQ","questions","showScore","tryAgain","window","reload","quiz1","quiz2","quiz3","onClick","image","class","question","answers","map","answer","answerText","App","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c189a08.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            flowers: [\n                {name: 'Daffodil', img: '/images/daffodil.png'},\n                {name: 'Cherry Blossom', img: '/images/cherryblossom.png'},\n                {name: 'Lily', img: '/images/lily.jpg'},\n                {name: 'Daisy', img: '/images/daisy.jpg'},\n                {name: 'Sunflower', img: '/images/sunflower.png'},\n                {name: 'Tulip', img: '/images/tulip.png'},\n                {name: 'Rose', img: '/images/rose.png'},\n                {name: 'Water Lily', img: '/images/waterlily.png'}\n            ]\n        };\n    }\n\n    makeFlowerGrid = () => {\n        let flowers = this.state.flowers;\n        let grid = []\n        let row = []\n        for (let i = 0; i < flowers.length; i++){\n            let{name, img} = flowers[i]\n            if(row.length === 4){\n                grid.push(<tr>{row}</tr>)\n                row = []\n            }\n            let quiz = {pathname: \"/quiz\", state: {flowerName: name}};\n            row.push(\n                <td>\n                <Link to={quiz}>\n                <img src={process.env.PUBLIC_URL + img} alt=\"flower\"></img>\n                </Link>\n                <p className=\"flowerName\">{name}</p>\n                </td>\n            )\n            \n        }\n        grid.push(<tr>{row}</tr>)\n        return grid\n    }\n\n    render() {\n        let username = \"\";\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.user){\n                    username = location.state.user;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"loginButton\">\n                    {username.length > 0 ? username\n                    : <Link to=\"/login\"><button type=\"text\">Login</button></Link>}   \n                </div>\n                <h2 className=\"homepageHeader\">Image Quiz Homepage</h2>\n                <table className=\"flowerTable\">\n                    <tbody>\n                    {this.makeFlowerGrid()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './Login.css';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            authenticated: false\n        };\n    }\n    onSubmit = (event) => {\n        if(this.state.username.trim().length > 0){\n            this.setState({authenticated: true});\n        }\n        event.preventDefault();\n    }\n\n    onInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({[name]: value});\n    }\n\n    render() {\n        let from = {pathname: \"/\", state: {user: this.state.username}};\n        if(this.state.authenticated){\n            return (\n                <Redirect to={from} />\n            );\n        }\n\n        return(\n            <div className=\"loginPage\">\n                <h2>Login Page</h2>\n                <form onSubmit={this.onSubmit}>\n                    <label>Username: </label>\n                    <input \n                    type=\"text\" \n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onInputChange}\n                    ></input>\n                    <button type=\"submit\">Login</button>\n                </form>  \n            </div>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\n\nclass Quiz extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            currQ: 0,\n            score: 0,\n            showScore: false\n        };\n    }\n\n    answerClicked = (correct) => {\n        if(correct){\n            let curr = this.state.score + 1;\n            this.setState({score: curr});\n        }\n        let numQ = this.state.currQ + 1;\n        if(numQ < questions.length){\n            this.setState({currQ: numQ});\n        }else{\n            this.setState({showScore: true});\n        }\n    }\n\n    tryAgain = () => {\n        window.location.reload();\n    }\n\n    render(){\n        let flowerName = \"\";\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.flowerName){\n                    flowerName = location.state.flowerName;\n                }\n \n            }\n        }\n        \n        if(flowerName === \"Daffodil\"){\n            questions = quiz1;\n        }else if(flowerName === \"Cherry Blossom\"){\n            questions = quiz2;\n        }else{\n            questions = quiz3;\n        }\n\n\n        return(\n            <div>\n                <h2 className=\"quizHeader\">Image Quiz</h2>\n                {this.state.showScore ? (\n                    <div className=\"scoreSec\">\n                        <h4>You scored {this.state.score} out of 6</h4>\n                        <Link to=\"/\">\n                        <button \n                        type=\"text\"\n                        className=\"endB\">Home\n                        </button>\n                        </Link>\n                        <button \n                        type=\"text\" \n                        onClick={this.tryAgain}\n                        className=\"endB\">Try Again\n                        </button>\n                    </div>\n                ) : (\n                <div className=\"quizSec\">\n                    <img \n                    src={process.env.PUBLIC_URL + questions[this.state.currQ].image} \n                    class=\"flowerImg\" \n                    alt=\"flower\"></img>\n                    <div className=\"quizQuestions\">\n                        <h4 className=\"questionText\">\n                            {this.state.currQ + 1}) {questions[this.state.currQ].question}\n                        </h4>\n                    </div>\n                    <div className=\"answerSec\">\n                    {questions[this.state.currQ].answers.map((answer) => (\n                        <button \n                        className=\"ansB\" \n                        type=\"text\"\n                        onClick={() => this.answerClicked(answer.correct)}>\n                            {answer.answerText}\n                        </button>\n                    ))}\n                    </div>\n                </div>\n                )}   \n            </div>\n        );\n    }\n}\n\nconst quiz1 = [\n    {\n        question: \"What is the name of this flower?\",\n        image: \"/images/daffodil.png\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", correct: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of the animal?\",\n        image: \"/images/RedPanda.jpg\",\n        answers: [\n            {answerText: \"Black Bear\", correct: false},\n            {answerText: \"Red Panda\", correct: true},\n            {answerText: \"Koala\", correct: false},\n            {answerText: \"Lemur\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of the insect?\",\n        image: \"/images/LadyBug.jpg\",\n        answers: [\n            {answerText: \"Fly\", correct: false},\n            {answerText: \"Grasshopper\", correct: false},\n            {answerText: \"Butterfly\", correct: false},\n            {answerText: \"Ladybug\", correct: true},\n        ],\n    },\n    {\n        question: \"What is the name of the plant?\",\n        image: \"/images/cactus.jpg\",\n        answers: [\n            {answerText: \"Orchid\", correct: false},\n            {answerText: \"Palm Tree\", correct: false},\n            {answerText: \"Aloe Vera\", correct: false},\n            {answerText: \"Cactus\", correct: true},\n        ],\n    },\n    {\n        question: \"What kind of fish is in the picture?\",\n        image: \"/images/Clownfish.jpg\",\n        answers: [\n            {answerText: \"Clownfish\", correct: true},\n            {answerText: \"Betta Fish\", correct: false},\n            {answerText: \"Catfish\", correct: false},\n            {answerText: \"Goldfish\", correct: false},\n        ],\n    },\n    {\n        question: \"What kind of plant is there?\",\n        image: \"/images/SucculentGarden.jpg\",\n        answers: [\n            {answerText: \"Cactus\", correct: false},\n            {answerText: \"Aloe Vera\", correct: false},\n            {answerText: \"Succulent Garden\", correct: true},\n            {answerText: \"Lilies\", correct: false},\n        ],\n    },\n];\n\nconst quiz2 = [\n    {\n        question: \"What is the name of the flower?\",\n        image: \"/images/cherryblossom.png\",\n        answers: [\n            {answerText: \"Water Lily\", correct: false},\n            {answerText: \"Daffodil\", correct: false},\n            {answerText: \"Cherry Blossom\", correct: true},\n            {answerText: \"Rose\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of the animal?\",\n        image: \"/images/SeaTurtle.jpg\",\n        answers: [\n            {answerText: \"Sea Turtle\", correct: true},\n            {answerText: \"Seahorse\", correct: false},\n            {answerText: \"Shark\", correct: false},\n            {answerText: \"Whale\", correct: false},\n        ],\n    },\n    {\n        question: \"What type of tree is pictured?\",\n        image: \"/images/LemonTree.jpg\",\n        answers: [\n            {answerText: \"Pine Tree\", correct: false},\n            {answerText: \"Palm Tree\", correct: false},\n            {answerText: \"Lemon Tree\", correct: true},\n            {answerText: \"Orange Tree\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of the animal?\",\n        image: \"/images/Otter.jpg\",\n        answers: [\n            {answerText: \"Sea Otter\", correct: true},\n            {answerText: \"Penguin\", correct: false},\n            {answerText: \"Walrus\", correct: false},\n            {answerText: \"Sea Lion\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of the plant?\",\n        image: \"/images/VenusFlyTrap.jpg\",\n        answers: [\n            {answerText: \"Orchid\", correct: false},\n            {answerText: \"Venus Fly Trap\", correct: true},\n            {answerText: \"Sunflower\", correct: false},\n            {answerText: \"Dandelion\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of the animal?\",\n        image: \"/images/Mongoose.jpg\",\n        answers: [\n            {answerText: \"Meerkat\", correct: false},\n            {answerText: \"Lemur\", correct: false},\n            {answerText: \"Fox\", correct: false},\n            {answerText: \"Mongoose\", correct: true},\n        ],\n    }\n];\n\nconst quiz3 = [\n    {\n        question: \"What is the name of this flower?\",\n        image: \"/images/lily.jpg\",\n        answers: [\n            {answerText: \"Lily\", correct: true},\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Tulip\", correct: false},\n            {answerText: \"Sunflower\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of this animal\",\n        image: \"/images/Moose.jpg\",\n        answers: [\n            {answerText: \"Stag\", correct: false},\n            {answerText: \"Moose\", correct: true},\n            {answerText: \"Reindeer\", correct: false},\n            {answerText: \"Goat\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the breed of this puppy?\",\n        image: \"/images/ScottishTerrier.jpg\",\n        answers: [\n            {answerText: \"Maltese\", correct: false},\n            {answerText: \"Poodle\", correct: false},\n            {answerText: \"Beagle\", correct: false},\n            {answerText: \"Scottish Terrier\", correct: true},\n        ],\n    },\n    {\n        question: \"What is the name of this plant?\",\n        image: \"/images/AloeVera.jpg\",\n        answers: [\n            {answerText: \"Cactus\", correct: false},\n            {answerText: \"Aloe Vera\", correct: true},\n            {answerText: \"Spider Plant\", correct: false},\n            {answerText: \"Monstera\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of this insect?\",\n        image: \"/images/HoneyBee.jpg\",\n        answers: [\n            {answerText: \"Honey Bee\", correct: true},\n            {answerText: \"Wasp\", correct: false},\n            {answerText: \"Hornet\", correct: false},\n            {answerText: \"Fly\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the breed of this puppy?\",\n        image: \"/images/ShihTzu.jpg\",\n        answers: [\n            {answerText: \"Shih Tzu\", correct: true},\n            {answerText: \"Maltese\", correct: false},\n            {answerText: \"Chihuahua\", correct: false},\n            {answerText: \"Pug\", correct: false},\n        ],\n    },\n];\n\nlet questions = quiz1;\nexport default Quiz;","import React from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Quiz from './components/Quiz';\nimport './App.css';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/quiz\" render={props => <Quiz {...props} />}>\n                </Route>\n                <Route path=\"/\" render={props => <Home {...props} />}>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}