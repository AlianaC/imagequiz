{"version":3,"sources":["components/Home.js","components/Login.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","makeFlowerGrid","flowers","state","grid","row","i","length","name","img","push","quiz","pathname","flowerName","flowerImg","to","src","process","alt","className","username","location","this","user","type","React","Component","Login","onSubmit","event","trim","setState","authenticated","preventDefault","onInputChange","value","target","from","onChange","Quiz","questions","quiz1","currQ","score","showScore","quiz2","quiz3","class","question","answers","map","answer","answerText","correct","corret","App","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.563010dd.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            flowers: [\n                {name: 'Daffodil', img: '/images/daffodil.png'},\n                {name: 'Cherry Blossom', img: '/images/cherryblossom.png'},\n                {name: 'Lily', img: '/images/lily.jpg'},\n                {name: 'Daisy', img: '/images/daisy.jpg'},\n                {name: 'Sunflower', img: '/images/sunflower.png'},\n                {name: 'Tulip', img: '/images/tulip.png'},\n                {name: 'Rose', img: '/images/rose.png'},\n                {name: 'Water Lily', img: '/images/waterlily.png'}\n            ]\n        };\n    }\n\n    makeFlowerGrid = () => {\n        let flowers = this.state.flowers;\n        let grid = []\n        let row = []\n        for (let i = 0; i < flowers.length; i++){\n            let{name, img} = flowers[i]\n            if(row.length === 4){\n                grid.push(<tr>{row}</tr>)\n                row = []\n            }\n            let quiz = {pathname: \"/quiz\", state: {flowerName: name, flowerImg: img}};\n            row.push(\n                <td>\n                <Link to={quiz}>\n                <img src={process.env.PUBLIC_URL + img} alt=\"flower\"></img>\n                </Link>\n                <p className=\"flowerName\">{name}</p>\n                </td>\n            )\n            \n        }\n        grid.push(<tr>{row}</tr>)\n        return grid\n    }\n\n    render() {\n        let username = \"\";\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.user){\n                    username = location.state.user;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"loginButton\">\n                    {username.length > 0 ? username\n                    : <Link to=\"/login\"><button type=\"text\">Login</button></Link>}   \n                </div>\n                <h3 className=\"homepageHeader\">Image Quiz Homepage</h3>\n                <table className=\"flowerTable\">\n                    <tbody>\n                    {this.makeFlowerGrid()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './Login.css';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            authenticated: false\n        };\n    }\n    onSubmit = (event) => {\n        if(this.state.username.trim().length > 0){\n            this.setState({authenticated: true});\n        }\n        event.preventDefault();\n    }\n\n    onInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({[name]: value});\n    }\n\n    render() {\n        let from = {pathname: \"/\", state: {user: this.state.username}};\n        if(this.state.authenticated){\n            return (\n                <Redirect to={from} />\n            );\n        }\n\n        return(\n            <div className=\"loginPage\">\n                <form onSubmit={this.onSubmit}>\n                    <label>Username: </label>\n                    <input \n                    type=\"text\" \n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onInputChange}\n                    ></input>\n                    <button type=\"submit\">Login</button>\n                </form>  \n            </div>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport './Quiz.css';\n\nclass Quiz extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: quiz1,\n            currQ: 0,\n            score: 0,\n            showScore: false\n        };\n    }\n    render(){\n        let flowerName = \"\";\n        let flowerImg = \"\";\n        const location = this.props.location;\n        if(location){\n            if(location.state){\n                if(location.state.flowerName){\n                    flowerName = location.state.flowerName;\n                }\n                if(location.state.flowerImg){\n                    flowerImg = location.state.flowerImg;\n                }\n            }\n        }\n        \n        if(flowerName === \"Daffodil\"){\n            questions = quiz1;\n        }else if(flowerName === \"Cherry Blossom\"){\n            questions = quiz2;\n        }else{\n            questions = quiz3;\n        }\n\n\n        return(\n            <div>\n                <h2 className=\"quizHeader\">Image Quiz</h2>\n                <div className=\"quizSec\">\n                    <img src={process.env.PUBLIC_URL + flowerImg} class=\"flowerImg\" alt=\"flower\"></img>\n                    <div className=\"quizQuestions\">\n                        <h4 className=\"questionText\">{questions[this.state.currQ].question}</h4>\n                    </div>\n                    <div className=\"answerSec\">\n                    {questions[this.state.currQ].answers.map((answer) => (\n                        <button className=\"ansB\" type=\"text\">{answer.answerText}</button>\n                    ))}\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nconst quiz1 = [\n    {\n        question: \"What is the name of this flower?\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", corret: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of this flower?\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", corret: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    }\n];\n\nconst quiz2 = [\n    {\n        question: \"What is the name of thy flower?2\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", corret: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of thee flower?2\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", corret: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    }\n];\n\nconst quiz3 = [\n    {\n        question: \"What is the name of this flower?3\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", corret: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    },\n    {\n        question: \"What is the name of this flower?3\",\n        answers: [\n            {answerText: \"Daisy\", correct: false},\n            {answerText: \"Daffodil\", corret: true},\n            {answerText: \"Lily\", correct: false},\n            {answerText: \"Rose\", correct: false},\n        ],\n    }\n];\n\nlet questions = quiz1;\nexport default Quiz;","import React from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Quiz from './components/Quiz';\nimport './App.css';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login />\n                </Route>\n                <Route path=\"/quiz\" render={props => <Quiz {...props} />}>\n                </Route>\n                <Route path=\"/\" render={props => <Home {...props} />}>\n                </Route>\n            </Switch>\n        </BrowserRouter>\n\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}